# https://taskfile.dev

version: '2'
env:
  PROJECT_NAME: kafka-connect
  ENV: '{{default "minikube" .ENV}}'
  DOCKER_REGISTRY: '{{default "default" .DOCKER_REGISTRY}}'
  NAMESPACE: '{{default "default" .NAMESPACE}}'
  IAM_ROLE: '{{default "arn:aws:iam::account_num:role_name" .IAM_ROLE}}'
vars:
  KUBE_CONTEXT: '{{default "minikube" .KUBE_CONTEXT}}'
  SERVICES: |-
    kafka-connect-s3offload

tasks:

  run.local:
    deps: [set.k8s.context]
    cmds:
      - >
        eval $(minikube docker-env);
        task build;
        task helm.deploy

  start.minikube:
    cmds:
      - if minikube status | grep Running; then echo "minikube running..."; else echo "starting minikube"; minikube start; fi

  default:
    cmds:
      - echo 'executed on {{if ne .KUBE_CONTEXT "minikube"}}remote{{else}}local{{end}}'
    silent: true

  build:
    deps: [set.k8s.context]
    cmds:
      - docker build -t $DOCKER_REGISTRY/data/$PROJECT_NAME:latest .
      - '{{if ne .KUBE_CONTEXT "minikube"}}docker push $DOCKER_REGISTRY/data/$PROJECT_NAME:latest{{end}}'

  helm.deploy:
    deps: [set.k8s.context]
    cmds:
      - >
        {{$helm_chart_name := .HELM_CHART_NAME}}
        {{range $service := .SERVICES | trim | splitLines -}}
          helm upgrade {{$service}} {{$helm_chart_name}} \
            --namespace $NAMESPACE \
            --install \
            --atomic \
            --cleanup-on-fail \
            --force \
            --history-max 3 \
            --wait \
            --timeout 600s \
            --set-string kafka_connect.CONNECT_IAM_ROLE=$IAM_ROLE \
            --set-string kafka_connect.image.repository=$DOCKER_REGISTRY/data/$PROJECT_NAME \
            --set-string kafka_connect.image.tag=latest \
            --values ./helm-values/{{$service}}-helm-values/values-$ENV.yaml;
        {{end}}
    vars:
      HELM_CHART_NAME: kafka-connect-helm

  helm.undeploy:
    deps: [set.k8s.context]
    cmds:
      - >
        {{range $service := .SERVICES | trim | splitLines -}}
          helm uninstall --namespace $NAMESPACE {{$service}}
        {{end}}

  helm.rollback:
    deps: [set.k8s.context]
    cmds:
      - >
        {{range $service := .SERVICES | trim | splitLines -}}
          helm rollback --namespace $NAMESPACE {{$service}}
        {{end}}

  set.k8s.context:
    cmds:
      - kubectl config set-context {{.KUBE_CONTEXT}} --namespace=$NAMESPACE
      - kubectl config use-context {{.KUBE_CONTEXT}} --namespace=$NAMESPACE
